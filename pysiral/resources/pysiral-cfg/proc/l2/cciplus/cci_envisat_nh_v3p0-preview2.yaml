# Level-2 processor settings for CCI+ Northern hemisphere CRDP v3.0-preview-1

id: "ESA CCI+ CryoSat-2 reprocessed northern hemisphere sea-ice thickness climate data record - Fall 2020 preview 2"
version_tag: "v3p0-preview2"

# This settings file is valid for
hemisphere: north

# Level 2 processor settings are mission specific
mission:
    id: envisat


# --- Level-2 processor steps ---
# 
# A list auxilliary datasets to be ingested before the execution of the processing steps. 

procsteps: 

    # Transfer variables from the l1b data object to the l2 data object
    # Notation is: 
    #
    # <l1b_datagroup>:
    #        <l1b_variable_name>: [l2_auxdata_id, l2_auxdata_name]
    -   module: l2proc.procsteps
        pyclass: L1BL2TransferVariables
        options: 
            classifier:
                sigma0: [sig, sigma0]
                peakiness: [pp, pulse_peakiness]
                leading_edge_width: [lew, leading_edge_width]
                late_tail_to_peak_power: [ltpp, late_tail_to_peak_power]
            correction:
                dry_troposphere: [rcdt, dry_troposphere]
                wet_troposphere: [rcwt, wet_troposphere]
                inverse_barometric: [rcib, inverse_barometric]
                ionosphere: [rcio, ionosphere]
                ocean_tide_elastic: [rcote, ocean_tide_elastic]
                ocean_tide_long_period: [rcotlp, ocean_tide_long_period]
                ocean_loading_tide: [rcolt, ocean_loading_tide]
                solid_earth_tide: [rcset, solid_earth_tide]
                geocentric_polar_tide: [rcgpt,  geocentric_polar_tide]
            time_orbit:
                antenna_pitch: [toantptch, antenna_pitch]
                antenna_roll: [toantrll, antenna_roll]
                antenna_yaw: [toantyaw, antenna_yaw]
            waveform:
                is_valid: [flgwfm, flag_waveform_is_valid]

    # Envisat specific backscatter correction of degrading RA-2 antenna
    -   module: filter
        pyclass: L1bBackscatterDriftCorrection
        options: 
            l1b_data_group: classifier
            l1b_parameter_name: sigma0
            backscatter_drift_factor: -0.003269253
            backscatter_base_period: [2011, 6]

    # Surface type classification algorithm
    -   module: surface
        pyclass: SICCI2SurfaceType
        options:
            lrm:
                ocean:
                    peakiness_max: 5.0
                    ice_concentration_min: 5.0
                lead:
                    peakiness_min: [46.90, 46.40, 46.20, 48.40, 0.00, 0.00, 0.00, 0.00, 0.00, 52.90, 51.00, 47.70]
                    sea_ice_backscatter_min: [28.80, 28.60, 28.50, 28.40, 0.00, 0.00, 0.00, 0.00, 0.00, 32.80, 30.80, 29.30]
                    leading_edge_width_max: [0.82, 0.82, 0.82, 0.82, 0.00, 0.00, 0.00, 0.00, 0.00, 0.82, 0.82, 0.82]
                    ice_concentration_min: 70.0
                sea_ice:
                    peakiness_max: [16.00, 14.80, 14.10, 14.20, 0.00, 0.00, 0.00, 0.00, 0.00, 19.40, 19.30, 16.90]
                    sea_ice_backscatter_min: 2.5
                    sea_ice_backscatter_max: [22.50, 21.80, 21.30, 20.40, 0.00, 0.00, 0.00, 0.00, 0.00, 25.90, 24.60, 22.80]
                    leading_edge_width_min: [0.81, 0.83, 0.83, 0.83, 0.00, 0.00, 0.00, 0.00, 0.00, 0.78, 0.78, 0.80]
                    ice_concentration_min: 70.0

    # Retracking algorithm dependent on surface type
    -   module: retracker
        pyclass: Level2RetrackerContainer
        options:
            ocean:
                pyclass: NoneRetracker
                options: null
            lead:
                pyclass: cTFMRA
                options:
                    # if arrays than [lrm, sar, sin]
                    # type can be fixed, sigma_func and sitype_sigma_func
                    threshold:
                        type: fixed
                        value: 0.95
                    offset: 0.0
                    wfm_oversampling_factor: 10
                    wfm_oversampling_method: linear
                    wfm_smoothing_window_size: [11, 11, 21]
                    first_maximum_normalized_threshold: [0.15, 0.15, 0.45]
                    first_maximum_local_order: 1
                    uncertainty:
                        type: fixed
                        value: 0.15
            sea_ice:
                pyclass: cTFMRA
                options:
                    # if arrays than [lrm, sar, sin]
                    # type can be fixed, sigma_func and sitype_sigma_func
                    threshold:
                        type: poly_plane_fit
                        intercept: 3.4775697362
                        coef_lew: [-5.9296875486, 4.3516498381, -1.0933131955]
                        coef_sig0: [-0.0914747272, 0.0063983796, -0.0001237455]
                    offset: 0.0
                    wfm_oversampling_factor: 10
                    wfm_oversampling_method: linear
                    wfm_smoothing_window_size: [11, 11, 21]
                    first_maximum_normalized_threshold: [0.15, 0.15, 0.45]
                    first_maximum_local_order: 1
                    uncertainty:
                        type: fixed
                        value: 0.15

    # Apply the range corrections 
    -   module: l2proc.procsteps
        pyclass: L2ApplyRangeCorrections
        options:
            corrections: 
                - dry_troposphere
                - wet_troposphere
                - inverse_barometric
                - ionosphere
                - ocean_tide_elastic
                - ocean_tide_long_period
                - ocean_loading_tide
                - solid_earth_tide
                - geocentric_polar_tide

    # Algorithm for instantaneos sea surface height (mss + ssa) and radar freeboard
    -   module: sla
        pyclass: SLASmoothedLinear
        options:
            use_ocean_wfm: False
            smooth_filter_width_m: 100000.0
            smooth_filter_width_footprint_size: 300.0
            pre_filtering: true
            pre_filter_maximum_mss_median_offset: 5.0 # in meter
            uncertainty_tiepoints_distance_max: 100000.
            uncertainty_minimum: 0.02
            uncertainty_maximum: 0.10
            marine_segment_filter:
                minimum_lead_number: 1
            tiepoint_maxdist_filter:
                maximum_distance_to_tiepoint: 200000.
                edges_only: false

    # Estimation of Radar Freeboard
    -   module: frb
        pyclass: RadarFreeboardDefault
        options: null

    # Algorithm for converting radar freeboard into freeboard
    -   module: frb
        pyclass: SnowGeometricCorrection
        options:
            vacuum_light_speed_reduction: mallett2020

    # Filter invalid freeboard values
    -   module: filter
        pyclass: L2ParameterValidRange
        options:
            source_variable: frb
            target_variables: [frb]
            valid_minimum_point_value: -0.25
            valid_maximum_point_value: 2.25

    # Add sea ice density to the Level-2 object
    # Base values for pure ice type uncertainties from Alexandrov et al., 2010, The Cryosphere
    -   module: sit
        pyclass: AlexandrovSeaIceDensity
        options:
            fyi_density: 916.7
            myi_density: 882.0
            uncertainty:
                fyi_density: 35.7
                myi_density: 23.0

    # Algorithm for getting sea ice thickness from other l2 parameters
    -   module: sit
        pyclass: SeaIceFreeboard2SIT
        options:
            water_density: 1024.0

    # Filters after thickness computation
    -   module: filter
        pyclass: L2ParameterValidRange
        options:
            source_variable: sit
            target_variables: [sit]        
            valid_minimum_point_value: -0.5
            valid_maximum_point_value: 10.5

    # Compute sea ice draft
    -   module: sit
        pyclass: L2SeaIceDraft
        options: {}


# Apply corrections of filters to the l1b input data
# All pyclasses must be present in the pysiral.filter module
l1b_pre_filtering:

    # Apply a drift correction to Envisat backcatter
    # NOTE: 
    #   The backscatter correction is not part of the Envisat l1bdata v030. In future updates the correction
    #   will be applied in the actual pre-processor and this correction should be removed from the Level-2
    #   processor recipe

