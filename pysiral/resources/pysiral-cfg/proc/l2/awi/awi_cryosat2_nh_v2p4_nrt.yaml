metadata:
    label: "AWI CryoSat-2 operational sea-ice thickness product (cs2awi v2.4 operational)"
    product_line: awi
    record_type: nrt
    platform: cryosat2
    version: v2p4
    file_version_tag: "v2p4"
    hemisphere: north


# --- Ingest auxiliary data ---
# 
# A list auxilliary datasets to be ingested before the execution of the processing steps. 
# 
# Usage:
#
#  - <auxdata_category>:       <- links to corresponding category in auxdata_def.yaml
#       name: <auxdata_name>   <- links auxdata_category.auxdata_name auxdata_def.yaml
#       options: {dict}        <- Options that may overwrite the ones already provided in auxdata_def.yaml
# 
# Notes: 
#
#   - The order of the auxdata definition is important as there might be dependancies of auxiliary datasets
#   
auxdata:

    # Add region codes
    # NOTE: It is advisable to do this in the beginning, since the following auxiliary data types can
    #       be modified depending on region code
    - region:
        name: nsidc_mod
        options: null

    # Load the
    - mss:
        name: dtu21
        options:
            latitude_range: [45.0, 90.0]

    # Load the
    - mdt:
        name: dtu17
        options:
            latitude_range: [45.0, 90.0]

    - sic:
        name: osisaf-operational
        options:
            exception_on_error: False
            fill_pole_hole:
                pole_hole_lat_threshold: 87.0
                pole_hole_fill_value: 100.

    - sitype:
        name: osisaf-operational
        options:
            fill_valid_sic_gaps: True
            exception_on_error: False

    - snow:
        name: clim_w99amsr2
        options:
            daily_scaling: True
            fyi_correction_factor: 0.5
            exception_on_error: False

    # Note: The snow density in this class will overwrite the snow density
    #       from the W99/AMSR2 climatology (this is intended)
    - snow:
            name: snow_density_seasonal_mallett
            options:
                snow_density_uncertainty: 50.


# --- Level-2 processor steps ---
# 
# A list auxilliary datasets to be ingested before the execution of the processing steps. 

procsteps: 

    # Transfer variables from the l1b data object to the l2 data object
    # Notation is: 
    #
    # <l1b_datagroup>:
    #        <l1b_variable_name>: [l2_auxdata_id, l2_auxdata_name]
    -   module: l2proc.procsteps
        pyclass: L1BL2TransferVariables
        options: 
            classifier:
                sigma0: [sig, sigma0]
                peakiness: [pp, pulse_peakiness]
                leading_edge_width: [lew, leading_edge_width]
                leading_edge_quality: [leq, leading_edge_quality]
                first_maximum_power: [fmp, first_maximum_power]
                stack_standard_deviation: [ssd, stack_standard_deviation]
                stack_peakiness: [spk, stack_peakiness]
                stack_skewness: [ssk, stack_skewness]
                stack_kurtosis: [skt, stack_kurtosis]
            correction:
                dry_troposphere: [rcdt, dry_troposphere]
                wet_troposphere: [rcwt, wet_troposphere]
                inverse_barometric: [rcib, inverse_barometric]
                ionosphere: [rcio, ionosphere]
                ocean_tide_elastic: [rcote, ocean_tide_elastic]
                ocean_tide_long_period: [rcotlp, ocean_tide_long_period]
                ocean_loading_tide: [rcolt, ocean_loading_tide]
                solid_earth_tide: [rcset, solid_earth_tide]
                geocentric_polar_tide: [rcgpt,  geocentric_polar_tide]
            time_orbit:
                antenna_pitch: [toantptch, antenna_pitch]
                antenna_roll: [toantrll, antenna_roll]
                antenna_yaw: [toantyaw, antenna_yaw]
                orbit_flag: [tofl, orbit_flag]
            waveform:
                radar_mode: [rmwfm, radar_mode]
                is_valid: [flgwfm, flag_waveform_is_valid]


    # --- Surface type classification algorithm ---
    #
    # Surface type classification algorithm can be fully constructed from the
    # config file. Only the land flag will always overwrite all classification after
    # the surface type classification.
    #
    # The conventions for the options are: 
    #
    # <surface_type_code>:  -> [ocean, lead, sea_ice]
    #   - radar_mode: <radar_mode>
    #     exclude: <surface type> 
    #     conditions:
    #         - logical expression of the type 
    #              "{<parameter_name>} <operator> <value>"
    #           including the parameter name in {}, e.g.
    #              "{sea_ice_concentration} < 15.0"
    #           Fixed values as in example above are possible, but also monthly values, e.g.:
    #              "{sigma0} >= [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0]"
    #           This example is evaluated as "{sigma0} >= 1.0" for January and as 
    #           "{sigma0} >= 12.0" for December.
    #           
    #         - ...
    #   - ...

    -   module: surface
        pyclass: ClassifierThresholdSurfaceType
        options:

            # This option defines the surface type order. It is important that
            # leads are classified before sea ice to fullfill the condition
            # that sea-ice waveforms are not lead waveforms. 
            surface_types: [ocean, lead, sea_ice]

            # Ocean classification is based on a low pulse peakiness
            # and the sea-ice concentration based ice mask
            ocean:

                - radar_mode: lrm
                  conditions: 
                      - "{sea_ice_concentration} < 15.0"

                - radar_mode: sar
                  conditions: 
                      - "{sea_ice_concentration} < 15.0"
                      - "{pulse_peakiness} < 5.0" 

                - radar_mode: sin
                  conditions: 
                      - "{sea_ice_concentration} < 15.0"
                      - "{pulse_peakiness} < 5.0"

            # Lead waveforms are classified based on sigma0, leading edge width
            # and pulse peakiness within the sea-ice mask.
            # NOTE: No LRM data over sea ice
            lead:

                - radar_mode: sar
                  conditions: 
                      - "{sea_ice_concentration} >= 15.0"
                      - "{pulse_peakiness} >= [67.30, 66.30, 66.60, 69.90, 69.90, 69.90, 69.90, 69.90, 69.90, 76.00, 73.80, 68.60]"
                      - "{sigma0} >= [23.80, 23.20, 23.30, 23.40, 23.40, 23.40, 23.40, 23.40, 23.40, 28.00, 25.80, 24.10]"
                      - "{leading_edge_width} <= [0.77, 0.78, 0.78, 0.76, 0.76, 0.76, 0.76, 0.76, 0.76, 0.72, 0.73, 0.76]"

                - radar_mode: sin
                  conditions:
                      - "{sea_ice_concentration} >= 15.0"
                      - "{pulse_peakiness} >= [264.30, 257.90, 253.60, 264.60, 264.60, 264.60, 264.60, 264.60, 264.60, 291.80, 288.80, 272.60]"
                      - "{sigma0} >= [24.90, 25.00, 24.10, 24.50, 24.50, 24.50, 24.50, 24.50, 24.50, 29.00, 27.40, 25.80]"
                      - "{leading_edge_width} <= [1.10, 1.11, 1.13, 1.09, 1.09, 1.09, 1.09, 1.09, 1.09, 1.02, 1.03, 1.07]"
                    
            # The sea ice classification uses as many waveforms as possible
            # and reduces the classification to all waveforms within the
            # sea ice mask which are not classified as leads and have a
            # valid leading edge. 
            sea_ice:

                - radar_mode: sar
                  exclude: lead
                  conditions:
                      - "{sea_ice_concentration} >= 15.0"
                      - "{pulse_peakiness} <= [30.50, 28.70, 28.10, 28.50, 28.50, 28.50, 28.50, 28.50, 28.50, 35.40, 34.90, 31.90]"
                      - "{sigma0} <= [20.80, 19.90, 19.60, 19.00, 19.00, 19.00, 19.00, 19.00, 19.00, 25.70, 23.20, 21.10]"
                      - "{sigma0} >= 2.0"
                      - "{leading_edge_width} >= [1.02, 1.08, 1.10, 1.11, 1.11, 1.11, 1.11, 1.11, 1.11, 0.91, 0.90, 0.97]"

                - radar_mode: sin
                  exclude: lead
                  conditions:
                      - "{sea_ice_concentration} >= 15.0"
                      - "{pulse_peakiness} <= [99.40, 94.20, 89.90, 90.00, 90.00, 90.00, 90.00, 90.00, 90.00, 114.40, 113.90, 103.80]"
                      - "{sigma0} <= [21.40, 20.90, 20.10, 19.10, 19.10, 19.10, 19.10, 19.10, 19.10, 24.30, 23.70, 22.00]"
                      - "{sigma0} >= 2.0"
                      - "{leading_edge_width} >= [1.55, 1.58, 1.62, 1.64, 1.64, 1.64, 1.64, 1.64, 1.64, 1.44, 1.44, 1.51]"

    # Retracking algorithm dependent on surface type
    -   module: retracker
        pyclass: Level2RetrackerContainer
        options:
            lead:
                pyclass: cTFMRA
                options:
                    # if arrays than [lrm, sar, sin]
                    threshold: 0.5
                    offset: 0.0
                    noise_level_range_bin_idx: [0, 5]
                    wfm_oversampling_factor: 10
                    wfm_oversampling_method: linear
                    wfm_smoothing_window_size: [11, 11, 21]
                    first_maximum_normalized_threshold: [0.15, 0.15, 0.45]
                    first_maximum_local_order: 1
                    first_maximum_ignore_leading_bins: 0
                    range_bias: [-0.022, 0.047, 0.017]
                    uncertainty:
                        type: fixed
                        value: 0.1
            sea_ice:
                pyclass: cTFMRA
                options:
                    # if arrays than [lrm, sar, sin]
                    threshold: 0.5
                    offset: 0.0
                    noise_level_range_bin_idx: [0, 5]
                    wfm_oversampling_factor: 10
                    wfm_oversampling_method: linear
                    wfm_smoothing_window_size: [11, 11, 21]
                    first_maximum_normalized_threshold: [0.15, 0.15, 0.45]
                    first_maximum_local_order: 1
                    first_maximum_ignore_leading_bins: 0
                    range_bias: [-0.022, 0.047, 0.017]
                    uncertainty:
                        type: fixed
                        value: 0.1

    # Apply the range corrections 
    -   module: l2proc.procsteps
        pyclass: L2ApplyRangeCorrections
        options:
            corrections: 
                - dry_troposphere
                - wet_troposphere
                - inverse_barometric
                - ionosphere
                - ocean_tide_elastic
                - ocean_tide_long_period
                - ocean_loading_tide
                - solid_earth_tide
                - geocentric_polar_tide

    # Algorithm for instantaneous sea surface height (mss + ssa) and radar freeboard
    -   module: sla
        pyclass: SLASmoothedLinear
        options:
            use_ocean_wfm: False
            smooth_filter_width_m: 100000.0
            smooth_filter_width_footprint_size: 300.0
            pre_filtering: true
            filter_max_mss_offset_m: 1.0 # in meter
            uncertainty_tiepoints_distance_max: 100000.
            uncertainty_minimum: 0.02
            uncertainty_maximum: 0.10
            marine_segment_filter:
                minimum_lead_number: 1
            tiepoint_maxdist_filter:
                maximum_distance_to_tiepoint: 200000.
                edges_only: False

    # Algorithm for adding the DOT = SLA + MDT to the L2 data object
    -   module: dot
        pyclass: DynamicOceanTopography
        options: null

    # Estimation of Radar Freeboard
    -   module: frb
        pyclass: RadarFreeboardDefault
        options: null

    # Algorithm for converting radar freeboard into freeboard
    -   module: frb
        pyclass: SnowGeometricCorrection
        options:
            vacuum_light_speed_reduction: mallett2020

    # Filter invalid freeboard values
    -   module: filter
        pyclass: L2ParameterValidRange
        options:
            source_variable: frb
            target_variables: [frb]
            valid_minimum_point_value: -0.25
            valid_maximum_point_value: 2.25

    # Add sea ice density to the Level-2 object
    # Base values for pure ice type uncertainties from Alexandrov et al., 2010, The Cryosphere
    -   module: sit
        pyclass: AlexandrovSeaIceDensity
        options:
            fyi_density: 916.7
            myi_density: 882.0
            uncertainty:
                fyi_density: 35.7
                myi_density: 23.0

    # Algorithm for getting sea ice thickness from other l2 parameters
    -   module: sit
        pyclass: SeaIceFreeboard2SIT
        options:
            water_density: 1024.0

    # Filters after thickness computation
    -   module: filter
        pyclass: L2ParameterValidRange
        options:
            source_variable: sit
            target_variables: [sit]        
            valid_minimum_point_value: -0.5
            valid_maximum_point_value: 10.5

    # Compute sea ice draft
    -   module: sit
        pyclass: L2SeaIceDraft
        options: {}