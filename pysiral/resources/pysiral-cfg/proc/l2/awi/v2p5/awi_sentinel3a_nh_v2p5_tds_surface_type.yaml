metadata:
    label: "AWI Sentinel-3 reprocessed sea-ice thickness product (surface type test data set)"
    product_line: awi
    record_type: tds
    platform: sentinel3a
    version: v2p5-surface-type-test
    file_version_tag: "v2p5"
    hemisphere: north


# --- Ingest auxiliary data ---
# 
# A list auxilliary datasets to be ingested before the execution of the processing steps. 
# 
# Usage:
#
#  - <auxdata_category>:       <- links to corresponding category in auxdata_def.yaml
#       name: <auxdata_name>   <- links auxdata_category.auxdata_name auxdata_def.yaml
#       options: {dict}        <- Options that may overwrite the ones already provided in auxdata_def.yaml
# 
# Notes: 
#
#   - The order of the auxdata definition is important as there might be dependancies of auxiliary datasets
#   
auxdata:

    # Add region codes
    # NOTE: It is advisable to do this in the beginning, since the following auxiliary data types can
    #       be modified depending on region code

    - sic:
        name: c3s
        options:
            version: v2p0
            exception_on_error: True


# --- Level-2 processor steps ---
# 
# A list auxilliary datasets to be ingested before the execution of the processing steps. 

procsteps: 

    # Transfer variables from the l1b data object to the l2 data object
    # Notation is: 
    #
    # <l1b_datagroup>:
    #        <l1b_variable_name>: [l2_auxdata_id, l2_auxdata_name]
    -   module: l2proc.procsteps
        pyclass: L1BL2TransferVariables
        options: 
            classifier:
                sigma0_ocean: [sig, sigma0]
                peakiness: [pp, pulse_peakiness]
                leading_edge_width: [lew, leading_edge_width]
                leading_edge_quality: [leq, leading_edge_quality]
                first_maximum_power: [fmp, first_maximum_power]
                stack_kurtosis: [skt, stack_kurtosis]
            correction:
                dry_troposphere: [rcdt, dry_troposphere]
                wet_troposphere: [rcwt, wet_troposphere]
                inverse_barometric: [rcib, inverse_barometric]
                ionosphere: [rcio, ionosphere]
                ocean_tide_elastic: [rcote, ocean_tide_elastic]
                ocean_tide_long_period: [rcotlp, ocean_tide_long_period]
                ocean_loading_tide: [rcolt, ocean_loading_tide]
                solid_earth_tide: [rcset, solid_earth_tide]
                geocentric_polar_tide: [rcgpt,  geocentric_polar_tide]
            time_orbit:
                antenna_pitch: [toantptch, antenna_pitch]
                antenna_roll: [toantrll, antenna_roll]
                antenna_yaw: [toantyaw, antenna_yaw]
                orbit_flag: [tofl, orbit_flag]
            waveform:
                radar_mode: [rmwfm, radar_mode]
                is_valid: [flgwfm, flag_waveform_is_valid]

    # Compute rolling classifier statistics
    -   module: l2proc.procsteps
        pyclass: ParameterRollingStatistics
        options:
            window_size_m: 25000.
            statistics: ["sdev"]
            input_parameters:
                - pulse_peakiness

    # --- Surface type classification algorithm ---
    #
    # Surface type classification algorithm can be fully constructed from the
    # config file. Only the land flag will always overwrite all classification after
    # the surface type classification.
    #
    # The conventions for the options are: 
    #
    # <surface_type_code>:  -> [ocean, lead, sea_ice]
    #   - radar_mode: <radar_mode>
    #     exclude: <surface type> 
    #     conditions:
    #         - logical expression of the type 
    #              "{<parameter_name>} <operator> <value>"
    #           including the parameter name in {}, e.g.
    #              "{sea_ice_concentration} < 15.0"
    #           Fixed values as in example above are possible, but also monthly values, e.g.:
    #              "{sigma0} >= [1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0, 11.0, 12.0]"
    #           This example is evaluated as "{sigma0} >= 1.0" for January and as 
    #           "{sigma0} >= 12.0" for December.
    #           
    #         - ...
    #   - ...

    # Surface type classification algorithm
    -   module: surface
        pyclass: ClassifierThresholdSurfaceType
        options:

            # This option defines the surface type order. It is important that
            # leads are classified before sea ice to fullfill the condition
            # that sea-ice waveforms are not lead waveforms.
            surface_types: [ocean, lead, sea_ice]

            # Ocean classification is based on a low pulse peakiness
            # and the sea-ice concentration based ice mask
            ocean:

                - radar_mode: sar
                  conditions:
                      - "{sea_ice_concentration} < 15.0"
                      - "{pulse_peakiness_rolling_sdev} < 1.0"

            # Lead waveforms are classified based on sigma0, leading edge width
            # and pulse peakiness within the sea-ice mask.
            # NOTE: No LRM data over sea ice
            lead:

                - radar_mode: sar
                  conditions:
                      - "{sea_ice_concentration} >= 15.0"
                      - "{pulse_peakiness} >= 66.0"
                      - "{sigma0} >= 23.0"
                      - "{leading_edge_width} <= 0.75"

            # The sea ice classification uses as many waveforms as possible
            # and reduces the classification to all waveforms within the
            # sea ice mask which are not classified as leads and have a
            # valid leading edge.
            sea_ice:

                - radar_mode: sar
                  exclude: lead
                  conditions:
                      - "{sea_ice_concentration} >= 15.0"
                      - "{leading_edge_quality} <= 1.02"
